pipeline {
    agent any

    environment {
        VIRTUALENV_HOME = "${WORKSPACE}/venv"
        DOCKER_HUB_CREDENTIALS = 'docker-hub-creds'
        DOCKER_IMAGE_NAME = 'messaging-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'github-creds', url: 'https://github.com/donald-alphonso/alx-backend-python.git'
                dir('messaging_app') {
                    echo "Code checked out"
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('messaging_app') {
                    sh 'python3 -m venv venv'
                    sh './venv/bin/pip3 install --upgrade pip'
                    sh './venv/bin/pip3 install -r messaging_app/requirements.txt'
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('messaging_app') {
                    sh 'cd messaging_app && ./venv/bin/pytest --junitxml=report.xml || echo "Tests completed"'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Construire l'image Docker localement
                    def dockerImage = docker.build("messaging-app:${env.BUILD_NUMBER}", "messaging_app")
                    echo "Docker image built successfully: messaging-app:${env.BUILD_NUMBER}"
                    
                    // Optionnel: tagger avec 'latest'
                    sh "docker tag messaging-app:${env.BUILD_NUMBER} messaging-app:latest"
                    
                    // Afficher les images Docker disponibles
                    sh "docker images | grep messaging-app"
                }
            }
        }

        stage('Test Docker Image') {
            steps {
                script {
                    // Tester que l'image fonctionne
                    sh """
                        docker run --rm --name test-container \
                        -d -p 8001:8000 \
                        messaging-app:${env.BUILD_NUMBER}
                        
                        # Attendre que le conteneur démarre
                        sleep 10
                        
                        # Vérifier que le conteneur fonctionne
                        docker ps | grep test-container || echo "Container check completed"
                        
                        # Arrêter le conteneur de test
                        docker stop test-container || echo "Container stopped"
                    """
                }
            }
        }

        stage('Publish Report') {
            steps {
                junit allowEmptyResults: true, testResults: 'messaging_app/report.xml'
            }
        }

    }

    post {
        always {
            echo 'Cleaning up Docker resources...'
            sh '''
                # Nettoyer les conteneurs arrêtés
                docker container prune -f || echo "No containers to clean"
                
                # Nettoyer les images non utilisées (optionnel)
                # docker image prune -f || echo "No images to clean"
            '''
        }
        
        success {
            echo 'Pipeline completed successfully!'
            echo "Docker image 'messaging-app:${env.BUILD_NUMBER}' is ready for deployment"
        }
        
        failure {
            echo 'Pipeline failed!'
            sh '''
                # Nettoyer en cas d'échec
                docker stop test-container || echo "No test container to stop"
                docker rm test-container || echo "No test container to remove"
            '''
        }
    }

    triggers {
        // Aucun déclencheur automatique : pipeline manuel
    }
}